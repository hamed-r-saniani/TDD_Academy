1-Dummy : SUT Argument
example: command that we passed to SUT

2-Mock : Assert is Against Mock Objects (Indirect Output)
examples:
            _courseRepository = Substitute.For<ICourseRepository>(); //Mock in Cunstructor of Test Calss or in Test Methods
           
            //assert
            _courseRepository.Received(1).Create(Arg.Any<Course>());

            //assert
            Received.InOrder(() =>    //Order is Important
            {
                _courseRepository.Received().Delete(command.Id);
                _courseRepository.Received().Create(Arg.Any<Course>());
            });

3-Stub : Just For Setup Fixture (Indirect Input) - no assert (Must No Assert on that)
example:
           //arrange
           _courseRepository.GetBy(command.Id).Returns(course);


4-Spy : More Capable Version Of Stub - can act as an observation point for the indirect outputs.

Spies are stubs that also record some information based on how they were called. One form of this might be an email service that records how many messages it was sent.



5-Fake : Alternative Implemention of the Same DOC Functionality
example:
           For example we say when create is execute a notification send to another system, now we want this notification dont send so we create another implemention for create and use it.


****All Code Examples of Above From CourseServiceTests Class****


**https://martinfowler.com/articles/mocksArentStubs.html**







Certainly! These terms are commonly used in unit testing to describe different types of test doubles, which are objects used to simulate the behavior of real objects in your tests. Here’s a simple explanation of each:

### 1. Mocks
**Definition:**
- Mocks are objects that register calls they receive so you can verify that interactions happened in a specific order or with specific arguments.

**Key Use:** 
- Used to verify interactions between objects.

**Example:**
- Imagine you’re testing a shopping cart system and you want to ensure that when you add an item, a call is made to update the inventory.
- The mock object verifies that the `UpdateInventory` method was called with the correct parameters.

```csharp
var mockInventory = new Mock<IInventory>();
mockInventory.Setup(i => i.Update(It.IsAny<Item>()));

var cart = new ShoppingCart(mockInventory.Object);
cart.Add(newItem);

mockInventory.Verify(i => i.Update(newItem), Times.Once);
```

### 2. Fakes
**Definition:**
- Fakes are objects with actual implementations, but those implementations are simplified and not suitable for production.

**Key Use:**
- Often used to replace complex dependencies with simpler versions that have the same interface.

**Example:**
- You have a database repository interface. Instead of hitting a real database in your unit tests, you create an in-memory fake repository.

```csharp
public class FakeRepository : IRepository
{
    private List<Item> items = new List<Item>();
    
    public void Add(Item item)
    {
        items.Add(item);
    }

    public Item Get(int id)
    {
        return items.FirstOrDefault(i => i.Id == id);
    }
}

var fakeRepo = new FakeRepository();
fakeRepo.Add(newItem);
var retrievedItem = fakeRepo.Get(newItem.Id);
```

### 3. Stubs
**Definition:**
- Stubs are objects that provide predefined answers to method calls made during the test.

**Key Use:**
- Used to feed the tested code with indirect inputs without verification.

**Example:**
- You want to test a service that calculates discounts based on customer history. You stub out the repository that retrieves the customer’s purchase history to return a specific set of data.

```csharp
var stubCustomerRepo = new Mock<ICustomerRepository>();
stubCustomerRepo.Setup(repo => repo.GetPurchases(It.IsAny<int>()))
                .Returns(new List<Purchase> { new Purchase(), new Purchase() });

var discountService = new DiscountService(stubCustomerRepo.Object);
var discount = discountService.CalculateDiscount(customerId);
```

### 4. Dummies
**Definition:**
- Dummies are objects passed around but never actually used. They are just placeholders to satisfy method signatures.

**Key Use:**
- Used to fill in parameters that are required but not essential in the context of the test.

**Example:**
- You need to pass a logger to a method, but your test doesn’t require any logging.

```csharp
var dummyLogger = new Mock<ILogger>();
var service = new SomeService(dummyLogger.Object);
service.DoSomething(); // The logger is never actually called in this test.
```

### Summary Comparison
| **Type**  | **Purpose**                                                | **Typical Use Case**                                    |
|-----------|-----------------------------------------------------------|---------------------------------------------------------|
| **Mocks** | Verify interactions with the object                        | Checking method calls and interactions                   |
| **Fakes** | Provide simplified working implementations                 | Replacing complex dependencies with simpler, real implementations |
| **Stubs** | Provide predetermined responses                            | Feeding the system with specific data for the test       |
| **Dummies** | Satisfy method signatures without being used              | Placeholder objects to fulfill parameter requirements   |

###
By using these different types of test doubles correctly, you can create more focused and reliable unit tests that validate specific behavior without relying on complex dependencies.

-------------------------------------------------------------------------

Certainly! Spy objects are one of the classifications of test doubles used in unit testing. These are objects that record the behavior of the system under test, usually by tracking the interactions such as method calls and the passed arguments.

### Explanation of Spies in Unit Testing

**Spies**:
- A Spy is a type of test double that not only mimics the real object but also keeps track of the interactions (method calls, arguments passed, etc.) it experienced during the test.
- Spies are useful when you want to verify that certain methods were called with specific parameters.

### Example of a Spy in xUnit with Moq

Let's walk through an example using `xUnit` and `Moq` libraries in a .NET project. We'll create a simple service interface, a class that uses this service, and a unit test to verify that the method on the service was called.

#### 1. Define the Interface and Class

First, define an interface `INotificationService` and implement a class `OrderProcessor` that uses this service.

```csharp
public interface INotificationService
{
    void SendNotification(string message);
}

public class OrderProcessor
{
    private readonly INotificationService _notificationService;

    public OrderProcessor(INotificationService notificationService)
    {
        _notificationService = notificationService;
    }

    public void ProcessOrder()
    {
        // Some order processing logic here...

        // Notify the user
        _notificationService.SendNotification("Order processed successfully.");
    }
}
```

#### 2. Install Necessary Packages

Ensure that you have `xUnit` and `Moq` packages installed. You can install them via NuGet:

```bash
dotnet add package xunit
dotnet add package xunit.runner.visualstudio
dotnet add package Moq
```

#### 3. Write Unit Test with a Spy

Now, write a unit test using `xUnit` and `Moq` to verify that `SendNotification` method is called with the correct parameter.

```csharp
using Moq;
using Xunit;

public class OrderProcessorTests
{
    [Fact]
    public void ProcessOrder_SendsNotification()
    {
        // Arrange
        var notificationServiceMock = new Moq.Mock<INotificationService>();
        var orderProcessor = new OrderProcessor(notificationServiceMock.Object);

        // Act
        orderProcessor.ProcessOrder();

        // Assert
        notificationServiceMock.Verify(ns => ns.SendNotification("Order processed successfully."), Times.Once);
    }
}
```

### Breakdown of the Test

1. **Arrange**:
    - Create a mock object of `INotificationService` using Moq.
    - Create an instance of `OrderProcessor`, passing the mock object as a dependency.

2. **Act**:
    - Call the `ProcessOrder` method on the `OrderProcessor` instance.

3. **Assert**:
    - Verify that the `SendNotification` method on the mock `INotificationService` was called exactly once with the argument "Order processed successfully.".
    - `Times.Once` ensures that this check passes only if the method is called exactly once.

### How Spies Work Here

- The Mock object created by Moq acts as a Spy.
- It records the interactions, including the method calls and arguments.
- The `Verify` method is used to assert that the expected interactions occurred.

This example shows how spies can help verify that certain methods were called correctly as part of unit testing, providing confidence that the system behaves as expected.


----------------------------------------------------------------

Certainly! Let's delve into the concept of a "Spy" in the context of unit testing, and how you can implement it using xUnit with Moq and NSubstitute.

### What is a Spy in Unit Testing?

In the context of unit testing, a "Spy" is a type of test double that not only records the interactions between the system under test and the dependencies but also allows for verification of those interactions later. It acts like both a mock and a stub:

- **Stub:** Provides predefined responses to method calls made during the test.
- **Mock:** Verifies that specific interactions (like method calls) were made.
- **Spy:** Captures and stores method calls and/or arguments so that the interactions can be asserted later.

### Example Using Moq

#### Setup

Moq is a popular mocking library in .NET that allows you to create and use spies.

1. **Install Moq**:
   ```sh
   dotnet add package Moq
   ```

2. **Install xUnit**:
   ```sh
   dotnet add package xunit
   dotnet add package xunit.runner.visualstudio
   ```

#### Code

Let's assume we have the following service interface and its implementation:

```csharp
public interface IEmailSender
{
    void SendEmail(string to, string subject, string body);
}

public class NotificationService
{
    private readonly IEmailSender _emailSender;

    public NotificationService(IEmailSender emailSender)
    {
        _emailSender = emailSender;
    }

    public void Notify(string message)
    {
        _emailSender.SendEmail("user@example.com", "Notification", message);
    }
}
```

Now, we'll write a test to ensure that the `SendEmail` method of `IEmailSender` is called when the `Notify` method is invoked.

```csharp
using Moq;
using Xunit;

public class NotificationServiceTests
{
    [Fact]
    public void Notify_ShouldCallSendEmail()
    {
        // Arrange
        var emailSenderMock = new Mock<IEmailSender>();
        var notificationService = new NotificationService(emailSenderMock.Object);

        // Act
        notificationService.Notify("Test message");

        // Assert
        emailSenderMock.Verify(es => es.SendEmail(
            It.Is<string>(to => to == "user@example.com"),
            It.Is<string>(subject => subject == "Notification"),
            It.Is<string>(body => body == "Test message"))
        );
    }
}
```

In this test, Moq acts as a spy by verifying that `SendEmail` was called with the expected parameters.

### Example Using NSubstitute

#### Setup

NSubstitute is another mocking library for .NET.

1. **Install NSubstitute**:
   ```sh
   dotnet add package NSubstitute
   ```

2. **Install xUnit**:
   ```sh
   dotnet add package xunit
   dotnet add package xunit.runner.visualstudio
   ```

#### Code

Let's rewrite the above test using NSubstitute.

```csharp
using NSubstitute;
using Xunit;

public class NotificationServiceTests
{
    [Fact]
    public void Notify_ShouldCallSendEmail()
    {
        // Arrange
        var emailSender = Substitute.For<IEmailSender>();
        var notificationService = new NotificationService(emailSender);

        // Act
        notificationService.Notify("Test message");

        // Assert
        emailSender.Received().SendEmail(
            "user@example.com",
            "Notification",
            "Test message"
        );
    }
}
```

In this test, NSubstitute acts as a spy by verifying that `SendEmail` was called with the expected parameters.

### Conclusion

Both Moq and NSubstitute allow you to create spies to verify interactions between your system under test and its dependencies. Moq uses the `Verify` method for this purpose, while NSubstitute uses the `Received` method.

Both approaches can provide strong guarantees that the correct methods are called with the correct parameters, helping you to ensure that your systems are functioning correctly.